
# RNA
# Shortly after I began working on the RNA model, a "proper" scientific paper appeared describing an RNA folding simulation.
# The work by Gillespie et al is actually much more optimized than the limited engine described here,
# allowing moves that change many cells on the lattice simultaneously, such as "pull" and "pivot" moves.
# RNA folding on the 3D triangular lattice
# Joel Gillespie , Martin Mayne  and Minghui Jiang 
# BMC Bioinformatics 2009, 10:369doi:10.1186/1471-2105-10-369

# The simulation here is 

# base colors: HSV values with S=1, V=0.5 & H depending on the first nucleotide: 0(a), .25(c), .5(g), .75(u)
NOUN n=(base|RNA_sequence)_a.* c=800000 e=-10
NOUN n=(base|RNA_sequence)_c.* c=408000 e=-10
NOUN n=(base|RNA_sequence)_g.* c=008080 e=-10
NOUN n=(base|RNA_sequence)_u.* c=400080 e=-10

# canonical basepairs: RGB components are the the sums of the RGB components of individual bases.
# these lines also define the stabilizing energy of a Watson-Crick or wobble basepair
NOUN n=basepair_(cg|gc).* c=40ff80 e=-17
NOUN n=basepair_(au|ua).* c=c00080 e=-18
NOUN n=basepair_(gu|ug).* c=4080ff e=-19
# non-canonical basepairs are a bit dimmer (3/4 as bright as a straight sum).
# these lines also define the unfavorable energy of such basepairs
NOUN n=basepair_(ac|ca).* c=906000 e=-23
NOUN n=basepair_(ag|ga|cu|uc).* c=606060 e=-23
NOUN n=basepair_aa.* c=c00000 e=-23
NOUN n=basepair_cc.* c=60c000 e=-23
NOUN n=basepair_gg.* c=00c0c0 e=-23
NOUN n=basepair_uu.* c=6000c0 e=-23

# define the covalent bond between consecutive bases on the same chain
BOND n=5to3 s=(RNA_sequence|base|basepair)_.* t=(RNA_sequence|base|basepair)_.* e=+10
BOND n=f5to3 s=(RNA_sequence|base|basepair)_.* t=(RNA_sequence|base|basepair)_.* e=+10
BOND n=r5to3 s=(RNA_sequence|base|basepair)_.* t=(RNA_sequence|base|basepair)_.* e=+10
BOND n=5to3f s=(RNA_sequence|base|basepair)_.* t=(RNA_sequence|base|basepair)_.* e=+10
BOND n=5to3r s=(RNA_sequence|base|basepair)_.* t=(RNA_sequence|base|basepair)_.* e=+10
BOND n=f5to3f s=(RNA_sequence|base|basepair)_.* t=(RNA_sequence|base|basepair)_.* e=+10
BOND n=r5to3r s=(RNA_sequence|base|basepair)_.* t=(RNA_sequence|base|basepair)_.* e=+10

# to make a basepair, merge two bases and their upstream(x) and downstream(y) bonds
VERB s=base_([acgu]) t=base_([acgu]) S=basepair_$1$2 T=_ p=1 v=pair_$1_to_$2 x=(s,5to3,t) x=(t,5to3,s) b=(s,5to3,xf) B=(s,f5to3,xf) b=(s,5to3f,xff) B=(s,f5to3f,xff) b=(yf,5to3,s) B=(yf,5to3f,s) b=(yff,f5to3,s) B=(yff,f5to3f,s) b=(t,5to3,xr) B=(s,r5to3,xr) b=(t,5to3r,xrr) B=(s,r5to3r,xrr) b=(yr,5to3,t) B=(yr,5to3r,s) b=(yrr,r5to3,t) B=(yrr,r5to3r,s)

# unpairing is the opposite move: we have to pick apart the -->x and y--> bonds
VERB s=basepair_(.)(.) t=_ S=base_$1 T=base_$2 p=1 v=unpair_$1_from_$2 b=(s,f5to3,xf) B=(s,5to3,xf) b=(s,f5to3f,xff) B=(s,5to3f,xff) b=(yf,5to3f,s) B=(yf,5to3,s) b=(yff,f5to3f,s) B=(yff,f5to3,s) b=(s,r5to3,xr) B=(t,5to3,xr) b=(s,r5to3r,xrr) B=(t,5to3r,xrr) b=(yr,5to3r,s) B=(yr,5to3,t) b=(yrr,r5to3r,s) B=(yrr,r5to3,t)

# all bases and basepairs do Brownian drift
VERB s=(base|basepair)_.* t=_ S=$T T=$S p=1 v=/drift k=(sT,5to3,x) k=(y,5to3,sT) k=(sT,5to3f,xf) k=(yf,5to3f,sT) k=(sT,f5to3,fx) k=(fy,f5to3,sT) k=(sT,f5to3f,xff) k=(yff,f5to3f,sT) k=(sT,r5to3,xr) k=(yr,r5to3,sT) k=(sT,5to3r,rx) k=(ry,5to3r,sT) k=(sT,r5to3r,xrr) k=(yrr,r5to3r,sT)

# bases and basepairs gradually degrade.
# the consequent loss of bond energy limits this in the middle of polymer chains, but not at the ends
VERB s=(base|basepair)_.* S=_ p=.0001 v=/degrade


# Photons mutate bases, preferring transitions to transversions
VERB s=photon/.* t=base_[ag] S=_ T=base_r p=.8 k=(x,5to3,t) k=(t,5to3,y)
VERB s=photon/.* t=base_[cu] S=_ T=base_y p=.8 k=(x,5to3,t) k=(t,5to3,y)
VERB s=photon/.* t=base_[acgu] S=_ T=base_n p=.2 k=(x,5to3,t) k=(t,5to3,y)
VERB s=base_r S=base_a k=(x,5to3,s) k=(s,5to3,y)
VERB s=base_r S=base_g k=(x,5to3,s) k=(s,5to3,y)
VERB s=base_y S=base_c k=(x,5to3,s) k=(s,5to3,y)
VERB s=base_y S=base_u k=(x,5to3,s) k=(s,5to3,y)
VERB s=base_n S=base_r k=(x,5to3,s) k=(s,5to3,y)
VERB s=base_n S=base_y k=(x,5to3,s) k=(s,5to3,y)


# now here is the constructor for an RNA sequence
# pick a direction, d
# To prevent collisions, just set this to east for now; but could use d:$F
# this rule is slow, to allow adequate sampling of chain IDs via the previous rule
VERB s=RNA_sequence_[acgu]+ t=.* S=$S/d:e T=$T p=.05 v=/pick_direction

# generate first base
VERB s=(RNA_sequence_)([acgu])([acgu]+)(/d:$F) t=_ S=base_$2 T=$1$3$4 p=1 v=generate_base_$2 B=(s,5to3,t) k=(x,5to3,s)

# generate last base
VERB s=(RNA_sequence_)([acgu])/.* t=.* S=base_$2 T=$T p=1 v=generate_last_base_$2 k=(x,5to3,s)


# allow run-length encoding of RNA sequences
# again with the blue/cyan pulsing
NOUN n=RNA_sequence_([acgu\d][acgu\d])* c=0000ff
NOUN n=RNA_sequence_[acgu\d]* c=00ffff
VERB s=(RNA_sequence_[acgu]*)([acgu])(\d+)(.*) t=.* S=$1$2$2$-3$4 T=$T p=1 v=/expand_run_length_encoding
# override run-length of 2:
VERB s=(RNA_sequence_[acgu]*)([acgu])(2)([^\d].*|) t=.* S=$1$2$2$-3$4 T=$T p=0 v=/expand_run_length_encoding
VERB s=(RNA_sequence_[acgu]*)([acgu])(2)([^\d].*|) t=.* S=$1$2$2$4 T=$T p=1 v=/expand_run_length_encoding

# Tools
TOOL n=RNA_sequence_a5u5 k=q
TOOL n=RNA_sequence_ccacucc k=w
TOOL n=RNA_sequence_ggaggugg k=e
TOOL n=RNA_sequence_ccaaccccuucc k=r
TOOL n=RNA_sequence_a20u20 k=t
